    1 #! /usr/bin/env python
    2 #  -*- coding: utf-8 -*-
    3 #
    4 # GUI module generated by PAGE version 6.2
    5 #  in conjunction with Tcl version 8.6
    6 #    Mar 05, 2022 07:29:30 PM EET  platform: Windows NT
    7 
    8 import sys
    9 
   10 try:
   11     import Tkinter as tk
   12 except ImportError:
   13     import tkinter as tk
   14 
   15 try:
   16     import ttk
   17     py3 = False
   18 except ImportError:
   19     import tkinter.ttk as ttk
   20     py3 = True
   21 
   22 import clouflare_support
   23 
   24 def vp_start_gui():
   25     '''Starting point when module is the main routine.'''
   26     global val, w, root
   27     root = tk.Tk()
   28     top = Toplevel1 (root)
   29     clouflare_support.init(root, top)
   30     root.mainloop()
   31 
   32 w = None
   33 def create_Toplevel1(rt, *args, **kwargs):
   34     '''Starting point when module is imported by another module.
   35        Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
   36     global w, w_win, root
   37     #rt = root
   38     root = rt
   39     w = tk.Toplevel (root)
   40     top = Toplevel1 (w)
   41     clouflare_support.init(w, top, *args, **kwargs)
   42     return (w, top)
   43 
   44 def destroy_Toplevel1():
   45     global w
   46     w.destroy()
   47     w = None
   48 
   49 class Toplevel1:
   50     def __init__(self, top=None):
   51         '''This class configures and populates the toplevel window.
   52            top is the toplevel containing window.'''
   53         _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
   54         _fgcolor = '#000000'  # X11 color: 'black'
   55         _compcolor = '#d9d9d9' # X11 color: 'gray85'
   56         _ana1color = '#d9d9d9' # X11 color: 'gray85'
   57         _ana2color = '#ececec' # Closest X11 color: 'gray92'
   58         self.style = ttk.Style()
   59         if sys.platform == "win32":
   60             self.style.theme_use('winnative')
   61         self.style.configure('.',background=_bgcolor)
   62         self.style.configure('.',foreground=_fgcolor)
   63         self.style.configure('.',font="TkDefaultFont")
   64         self.style.map('.',background=
   65             [('selected', _compcolor), ('active',_ana2color)])
   66 
   67         top.geometry("600x450+383+106")
   68         top.minsize(116, 1)
   69         top.maxsize(1366, 746)
   70         top.resizable(1,  1)
   71         top.title("New Toplevel")
   72         top.configure(background="#d9d9d9")
   73 
   74         self.Button1 = tk.Button(top)
   75         self.Button1.place(relx=0.3, rely=0.822, height=34, width=206)
   76         self.Button1.configure(activebackground="#ececec")
   77         self.Button1.configure(activeforeground="#000000")
   78         self.Button1.configure(background="#d9d9d9")
   79         self.Button1.configure(disabledforeground="#a3a3a3")
   80         self.Button1.configure(foreground="#000000")
   81         self.Button1.configure(highlightbackground="#d9d9d9")
   82         self.Button1.configure(highlightcolor="black")
   83         self.Button1.configure(pady="0")
   84         self.Button1.configure(text='''cloudflare.com''')
   85 
   86         global _images
   87         _images = (
   88 
   89          tk.PhotoImage("img_close", data='''R0lGODlhDAAMAIQUADIyMjc3Nzk5OT09PT
   90                  8/P0JCQkVFRU1NTU5OTlFRUVZWVmBgYGF hYWlpaXt7e6CgoLm5ucLCwszMzNbW
   91                  1v//////////////////////////////////// ///////////yH5BAEKAB8ALA
   92                  AAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+ fkxBgPiBDwshCWHQfc5
   93                  KkoNUtRHpYYAADs= '''),
   94 
   95          tk.PhotoImage("img_closeactive", data='''R0lGODlhDAAMAIQcALwuEtIzFL46
   96                  INY0Fdk2FsQ8IdhAI9pAIttCJNlKLtpLL9pMMMNTP cVTPdpZQOBbQd60rN+1rf
   97                  Czp+zLxPbMxPLX0vHY0/fY0/rm4vvx8Pvy8fzy8P//////// ///////yH5BAEK
   98                  AB8ALAAAAAAMAAwAAAVHYLQQZEkukWKuxEgg1EPCcilx24NcHGYWFhx P0zANBE
   99                  GOhhFYGSocTsax2imDOdNtiez9JszjpEg4EAaA5jlNUEASLFICEgIAOw== '''),
  100 
  101          tk.PhotoImage("img_closepressed", data='''R0lGODlhDAAMAIQeAJ8nD64qELE
  102                  rELMsEqIyG6cyG7U1HLY2HrY3HrhBKrlCK6pGM7lD LKtHM7pKNL5MNtiViNaon
  103                  +GqoNSyq9WzrNyyqtuzq+O0que/t+bIwubJw+vJw+vTz+zT z////////yH5BAE
  104                  KAB8ALAAAAAAMAAwAAAVJIMUMZEkylGKuwzgc0kPCcgl123NcHWYW Fs6Gp2mYB
  105                  IRgR7MIrAwVDifjWO2WwZzpxkxyfKVCpImMGAeIgQDgVLMHikmCRUpMQgA7 ''')
  106         )
  107 
  108         self.style.element_create("close", "image", "img_close",
  109                ("active", "pressed", "!disabled", "img_closepressed"),
  110                ("active", "alternate", "!disabled",
  111                "img_closeactive"), border=8, sticky='')
  112 
  113         self.style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
  114                                      {"sticky": "nswe"})])
  115         self.style.layout("ClosetabNotebook.Tab", [
  116             ("ClosetabNotebook.tab",
  117               { "sticky": "nswe",
  118                 "children": [
  119                     ("ClosetabNotebook.padding", {
  120                         "side": "top",
  121                         "sticky": "nswe",
  122                         "children": [
  123                             ("ClosetabNotebook.focus", {
  124                                 "side": "top",
  125                                 "sticky": "nswe",
  126                                 "children": [
  127                                     ("ClosetabNotebook.label", {"side":
  128                                       "left", "sticky": ''}),
  129                                     ("ClosetabNotebook.close", {"side":
  130                                         "left", "sticky": ''}),]})]})]})])
  131 
  132         PNOTEBOOK = "ClosetabNotebook" 
  133 
  134         self.style.configure('TNotebook.Tab', background=_bgcolor)
  135         self.style.configure('TNotebook.Tab', foreground=_fgcolor)
  136         self.style.map('TNotebook.Tab', background=
  137             [('selected', _compcolor), ('active',_ana2color)])
  138         self.PNotebook1 = ttk.Notebook(top)
  139         self.PNotebook1.place(relx=0.0, rely=0.0, relheight=0.502
  140                 , relwidth=0.507)
  141         self.PNotebook1.configure(takefocus="")
  142         self.PNotebook1.configure(style=PNOTEBOOK)
  143         self.PNotebook1_t1 = tk.Frame(self.PNotebook1)
  144         self.PNotebook1.add(self.PNotebook1_t1, padding=3)
  145         self.PNotebook1.tab(0, text="Page 1",compound="left",underline="-1",)
  146         self.PNotebook1_t1.configure(background="#d9d9d9")
  147         self.PNotebook1_t1.configure(highlightbackground="#d9d9d9")
  148         self.PNotebook1_t1.configure(highlightcolor="black")
  149         self.PNotebook1_t2 = tk.Frame(self.PNotebook1)
  150         self.PNotebook1.add(self.PNotebook1_t2, padding=3)
  151         self.PNotebook1.tab(1, text="Page 2",compound="left",underline="-1",)
  152         self.PNotebook1_t2.configure(background="#d9d9d9")
  153         self.PNotebook1_t2.configure(highlightbackground="#d9d9d9")
  154         self.PNotebook1_t2.configure(highlightcolor="black")
  155         self.PNotebook1.bind('<Button-1>',_button_press)
  156         self.PNotebook1.bind('<ButtonRelease-1>',_button_release)
  157         self.PNotebook1.bind('<Motion>',_mouse_over)
  158 
  159 # The following code is add to handle mouse events with the close icons
  160 # in PNotebooks widgets.
  161 def _button_press(event):
  162     widget = event.widget
  163     element = widget.identify(event.x, event.y)
  164     if "close" in element:
  165         index = widget.index("@%d,%d" % (event.x, event.y))
  166         widget.state(['pressed'])
  167         widget._active = index
  168 
  169 def _button_release(event):
  170     widget = event.widget
  171     if not widget.instate(['pressed']):
  172             return
  173     element = widget.identify(event.x, event.y)
  174     try:
  175         index = widget.index("@%d,%d" % (event.x, event.y))
  176     except TclError:
  177         pass
  178     if "close" in element and widget._active == index:
  179         widget.forget(index)
  180         widget.event_generate("<<NotebookTabClosed>>")
  181 
  182     widget.state(['!pressed'])
  183     widget._active = None
  184 
  185 def _mouse_over(event):
  186     widget = event.widget
  187     element = widget.identify(event.x, event.y)
  188     if "close" in element:
  189         widget.state(['alternate'])
  190     else:
  191         widget.state(['!alternate'])
  192 
  193 if __name__ == '__main__':
  194     vp_start_gui()
  195 
  196 

