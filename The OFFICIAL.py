    1 #! /usr/bin/env python
    2 #  -*- coding: utf-8 -*-
    3 #
    4 # GUI module generated by PAGE version 6.2
    5 #  in conjunction with Tcl version 8.6
    6 #    Jun 22, 2021 07:45:27 PM EEST  platform: Windows NT
    7 
    8 import sys
    9 
   10 try:
   11     import Tkinter as tk
   12 except ImportError:
   13     import tkinter as tk
   14 
   15 try:
   16     import ttk
   17     py3 = False
   18 except ImportError:
   19     import tkinter.ttk as ttk
   20     py3 = True
   21 
   22 import THe OFFICIAL APP_support
   23 
   24 def vp_start_gui():
   25     '''Starting point when module is the main routine.'''
   26     global val, w, root
   27     root = tk.Tk()
   28     THe OFFICIAL APP_support.set_Tk_var()
   29     top = Toplevel1 (root)
   30     THe OFFICIAL APP_support.init(root, top)
   31     root.mainloop()
   32 
   33 w = None
   34 def create_Toplevel1(rt, *args, **kwargs):
   35     '''Starting point when module is imported by another module.
   36        Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
   37     global w, w_win, root
   38     #rt = root
   39     root = rt
   40     w = tk.Toplevel (root)
   41     THe OFFICIAL APP_support.set_Tk_var()
   42     top = Toplevel1 (w)
   43     THe OFFICIAL APP_support.init(w, top, *args, **kwargs)
   44     return (w, top)
   45 
   46 def destroy_Toplevel1():
   47     global w
   48     w.destroy()
   49     w = None
   50 
   51 class Toplevel1:
   52     def __init__(self, top=None):
   53         '''This class configures and populates the toplevel window.
   54            top is the toplevel containing window.'''
   55         _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
   56         _fgcolor = '#000000'  # X11 color: 'black'
   57         _compcolor = '#d9d9d9' # X11 color: 'gray85'
   58         _ana1color = '#d9d9d9' # X11 color: 'gray85'
   59         _ana2color = '#ececec' # Closest X11 color: 'gray92'
   60         self.style = ttk.Style()
   61         if sys.platform == "win32":
   62             self.style.theme_use('winnative')
   63         self.style.configure('.',background=_bgcolor)
   64         self.style.configure('.',foreground=_fgcolor)
   65         self.style.configure('.',font="TkDefaultFont")
   66         self.style.map('.',background=
   67             [('selected', _compcolor), ('active',_ana2color)])
   68 
   69         top.geometry("1366x705+-8+-8")
   70         top.minsize(120, 1)
   71         top.maxsize(1370, 749)
   72         top.resizable(1,  1)
   73         top.title("New Toplevel")
   74         top.configure(background="#d9d9d9")
   75 
   76         self.Canvas1 = tk.Canvas(top)
   77         self.Canvas1.place(relx=0.183, rely=0.057, relheight=0.671
   78                 , relwidth=0.69)
   79         self.Canvas1.configure(background="#0080ff")
   80         self.Canvas1.configure(borderwidth="2")
   81         self.Canvas1.configure(insertbackground="black")
   82         self.Canvas1.configure(relief="ridge")
   83         self.Canvas1.configure(selectbackground="blue")
   84         self.Canvas1.configure(selectforeground="white")
   85 
   86         self.PC_TECH_GR_THE_GRAND_ = tk.Text(self.Canvas1)
   87         self.PC_TECH_GR_THE_GRAND_.place(relx=0.265, rely=0.381, relheight=0.283
   88                 , relwidth=0.418)
   89         self.PC_TECH_GR_THE_GRAND_.configure(background="white")
   90         self.PC_TECH_GR_THE_GRAND_.configure(font="TkTextFont")
   91         self.PC_TECH_GR_THE_GRAND_.configure(foreground="black")
   92         self.PC_TECH_GR_THE_GRAND_.configure(highlightbackground="#d9d9d9")
   93         self.PC_TECH_GR_THE_GRAND_.configure(highlightcolor="black")
   94         self.PC_TECH_GR_THE_GRAND_.configure(insertbackground="black")
   95         self.PC_TECH_GR_THE_GRAND_.configure(selectbackground="blue")
   96         self.PC_TECH_GR_THE_GRAND_.configure(selectforeground="white")
   97         self.PC_TECH_GR_THE_GRAND_.configure(wrap="word")
   98 
   99         global _images
  100         _images = (
  101 
  102          tk.PhotoImage("img_close", data='''R0lGODlhDAAMAIQUADIyMjc3Nzk5OT09PT
  103                  8/P0JCQkVFRU1NTU5OTlFRUVZWVmBgYGF hYWlpaXt7e6CgoLm5ucLCwszMzNbW
  104                  1v//////////////////////////////////// ///////////yH5BAEKAB8ALA
  105                  AAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+ fkxBgPiBDwshCWHQfc5
  106                  KkoNUtRHpYYAADs= '''),
  107 
  108          tk.PhotoImage("img_closeactive", data='''R0lGODlhDAAMAIQcALwuEtIzFL46
  109                  INY0Fdk2FsQ8IdhAI9pAIttCJNlKLtpLL9pMMMNTP cVTPdpZQOBbQd60rN+1rf
  110                  Czp+zLxPbMxPLX0vHY0/fY0/rm4vvx8Pvy8fzy8P//////// ///////yH5BAEK
  111                  AB8ALAAAAAAMAAwAAAVHYLQQZEkukWKuxEgg1EPCcilx24NcHGYWFhx P0zANBE
  112                  GOhhFYGSocTsax2imDOdNtiez9JszjpEg4EAaA5jlNUEASLFICEgIAOw== '''),
  113 
  114          tk.PhotoImage("img_closepressed", data='''R0lGODlhDAAMAIQeAJ8nD64qELE
  115                  rELMsEqIyG6cyG7U1HLY2HrY3HrhBKrlCK6pGM7lD LKtHM7pKNL5MNtiViNaon
  116                  +GqoNSyq9WzrNyyqtuzq+O0que/t+bIwubJw+vJw+vTz+zT z////////yH5BAE
  117                  KAB8ALAAAAAAMAAwAAAVJIMUMZEkylGKuwzgc0kPCcgl123NcHWYW Fs6Gp2mYB
  118                  IRgR7MIrAwVDifjWO2WwZzpxkxyfKVCpImMGAeIgQDgVLMHikmCRUpMQgA7 ''')
  119         )
  120 
  121         self.style.element_create("close", "image", "img_close",
  122                ("active", "pressed", "!disabled", "img_closepressed"),
  123                ("active", "alternate", "!disabled",
  124                "img_closeactive"), border=8, sticky='')
  125 
  126         self.style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
  127                                      {"sticky": "nswe"})])
  128         self.style.layout("ClosetabNotebook.Tab", [
  129             ("ClosetabNotebook.tab",
  130               { "sticky": "nswe",
  131                 "children": [
  132                     ("ClosetabNotebook.padding", {
  133                         "side": "top",
  134                         "sticky": "nswe",
  135                         "children": [
  136                             ("ClosetabNotebook.focus", {
  137                                 "side": "top",
  138                                 "sticky": "nswe",
  139                                 "children": [
  140                                     ("ClosetabNotebook.label", {"side":
  141                                       "left", "sticky": ''}),
  142                                     ("ClosetabNotebook.close", {"side":
  143                                         "left", "sticky": ''}),]})]})]})])
  144 
  145         PNOTEBOOK = "ClosetabNotebook" 
  146 
  147         self.style.configure('TNotebook.Tab', background=_bgcolor)
  148         self.style.configure('TNotebook.Tab', foreground=_fgcolor)
  149         self.style.map('TNotebook.Tab', background=
  150             [('selected', _compcolor), ('active',_ana2color)])
  151         self.SITE_OFFICIAL = ttk.Notebook(self.Canvas1)
  152         self.SITE_OFFICIAL.place(relx=0.085, rely=0.613, relheight=0.478
  153                 , relwidth=0.322)
  154         self.SITE_OFFICIAL.configure(takefocus="")
  155         self.SITE_OFFICIAL.configure(style=PNOTEBOOK)
  156         self.SITE OFFICIAL_t1 = tk.Frame(self.SITE_OFFICIAL)
  157         self.SITE_OFFICIAL.add(self.SITE OFFICIAL_t1, padding=3)
  158         self.SITE_OFFICIAL.tab(0, text="Page 1", compound="left", underline="-1"
  159                 ,)
  160         self.SITE OFFICIAL_t1.configure(background="#d9d9d9")
  161         self.SITE OFFICIAL_t1.configure(highlightbackground="#d9d9d9")
  162         self.SITE OFFICIAL_t1.configure(highlightcolor="black")
  163         self.SITE OFFICIAL_t2 = tk.Frame(self.SITE_OFFICIAL)
  164         self.SITE_OFFICIAL.add(self.SITE OFFICIAL_t2, padding=3)
  165         self.SITE_OFFICIAL.tab(1, text="Page 2", compound="left", underline="-1"
  166                 ,)
  167         self.SITE OFFICIAL_t2.configure(background="#d9d9d9")
  168         self.SITE OFFICIAL_t2.configure(highlightbackground="#d9d9d9")
  169         self.SITE OFFICIAL_t2.configure(highlightcolor="black")
  170         self.SITE_OFFICIAL.bind('<Button-1>',_button_press)
  171         self.SITE_OFFICIAL.bind('<ButtonRelease-1>',_button_release)
  172         self.SITE_OFFICIAL.bind('<Motion>',_mouse_over)
  173 
  174         self.http://pctechgreu.unaux.com/?z = tk.Checkbutton(self.Canvas1)
  175         self.http://pctechgreu.unaux.com/?z.place(relx=0.074, rely=0.127
  176                 , relheight=0.053, relwidth=0.065)
  177         self.http://pctechgreu.unaux.com/?z.configure(activebackground="#ececec")
  178         self.http://pctechgreu.unaux.com/?z.configure(activeforeground="#000000")
  179         self.http://pctechgreu.unaux.com/?z.configure(background="#d9d9d9")
  180         self.http://pctechgreu.unaux.com/?z.configure(disabledforeground="#a3a3a3")
  181         self.http://pctechgreu.unaux.com/?z.configure(foreground="#000000")
  182         self.http://pctechgreu.unaux.com/?z.configure(highlightbackground="#d9d9d9")
  183         self.http://pctechgreu.unaux.com/?z.configure(highlightcolor="black")
  184         self.http://pctechgreu.unaux.com/?z.configure(justify='left')
  185         self.http://pctechgreu.unaux.com/?z.configure(text='''Check''')
  186         self.http://pctechgreu.unaux.com/?z.configure(variable=THe OFFICIAL APP_support.che48)
  187 
  188 # The following code is add to handle mouse events with the close icons
  189 # in PNotebooks widgets.
  190 def _button_press(event):
  191     widget = event.widget
  192     element = widget.identify(event.x, event.y)
  193     if "close" in element:
  194         index = widget.index("@%d,%d" % (event.x, event.y))
  195         widget.state(['pressed'])
  196         widget._active = index
  197 
  198 def _button_release(event):
  199     widget = event.widget
  200     if not widget.instate(['pressed']):
  201             return
  202     element = widget.identify(event.x, event.y)
  203     try:
  204         index = widget.index("@%d,%d" % (event.x, event.y))
  205     except TclError:
  206         pass
  207     if "close" in element and widget._active == index:
  208         widget.forget(index)
  209         widget.event_generate("<<NotebookTabClosed>>")
  210 
  211     widget.state(['!pressed'])
  212     widget._active = None
  213 
  214 def _mouse_over(event):
  215     widget = event.widget
  216     element = widget.identify(event.x, event.y)
  217     if "close" in element:
  218         widget.state(['alternate'])
  219     else:
  220         widget.state(['!alternate'])
  221 
  222 if __name__ == '__main__':
  223     vp_start_gui()
  224 
  225 

